#include "avl.h"
AVL::AVL()
{
	ROOT = 0;
}
bool AVL::insert(NODE n)
{
	NODE* s = this->ROOT;
	NODE* in = new NODE;
	in->key = n.key;
	in->l = 0;
	in->r = 0;
	in->p = 0;
	in->h = 0;
	if(ROOT == 0)
	{
		ROOT = in;
		return true;
	}
	//assume no equal keys
	while(true)
	{
		if(in->key < s->key)
		{
			if(s->l == 0) break;
			else s = s->l;
		}
		else if(in->key > s->key)
		{
			if(s->r == 0) break;
			else s = s->r;
		}
	}
	in -> p = s;
	if(s -> key < in -> key) s -> r = in;
	else s -> l = in;
	update_height(s);
	while(s != ROOT)
	{
		if(s->l !=0 && s->r != 0 && !(abs(s->l->h - s->r->h) <= 1) ) break;
		if(s->p != 0)
		{
			s = s->p;
			update_height(s);
		}
		else //reached root
		{
			update_height(s);
			break;
		}
	}
	while(s != ROOT)
	{
		if(s->r !=0 && s->l != 0 && s->r->h > s->l->h)
		{
			if((s->r->r !=0 && s->r->l != 0) && (s->r->r->h > s->r->l->h || s->r->r->h == s->r->l->h) )
			{
				left_rotate(s->key);
			}
			else
			{
				right_rotate(s->r->key);
				left_rotate(s->key);
			}
			s = s->p->p;
			continue;
		}
		else
		{
			if(s->l->l->h > s->l->r->h || s->l->l->h == s->l->r->h)
			{
				right_rotate(s->key);
			}
			else
			{
				left_rotate(s->l->key);
				right_rotate(s->key);
			}
			s = s->p->p;
			continue;
		}
	}
	return true;
}
NODE* AVL::search(int k)
{
	NODE* s = this->ROOT;
	while(! (s->l == 0 && s->r == 0) )
	{
		if(s->key < k) s = s->r;
		else if(s->key > k) s = s->l;
		else return s;
	}
	return 0;
}
void AVL::update_height(NODE* n)
{
	if(n != 0)
	{
		n->h = 1;
		if(n->l == 0 && n->r == 0) ;
		if(n->l == 0 && n->r !=0) n->h += n->r->h;
		else if(n->r == 0 && n->l != 0) n->h += n->l->h;
		else
		{
			n->h += n->r->h > n->l->h ? n->r->h : n->l->h;
		}
	}
}
void AVL::right_rotate(int k)
{
	NODE* x = search({k}); //node to be rotated
	NODE* y = x->l; //set y
	if(x->l !=0 && y->r != 0)x->l = y->r; //y's right subtree is x's left subtree
	if(y->r != 0) y->r->p = x;
	y->p = x->p; //linking parent
	if(x->p == 0) ROOT = y;
	else if(x == x->p->r) x->p->r =y;
	else x->p->l = y;
	y->r = x; //put x on y's right
	x->p = y;
}
// same with x and y interchanged
void AVL::left_rotate(int k)
{
	NODE* x = search({k}); //node to be rotated
	NODE* y = x->r; //set y
	x->r = y->l; //y's left subtree is x's right subtree
	if(y->l != 0) y->l->p = x;
	y->p = x->p; //linking parent
	if(x->p == 0) ROOT = y;
	else if(x == x->p->l) x->p->l =y;
	else x->p->r = y;
	y->l = x; //put x on y's left
	x->p = y;
}
void AVL::inorder_traversal(NODE& n) const
{
	if(n.l != 0) postorder_traversal(*n.l);
	std::cout<<n.key<<std::endl;
	if(n.r != 0) postorder_traversal(*n.r);
}
void AVL::postorder_traversal(NODE& n) const
{
	if(n.l != 0) postorder_traversal(*n.l);
	if(n.r != 0) postorder_traversal(*n.r);
	std::cout<<n.key<<std::endl;
}
